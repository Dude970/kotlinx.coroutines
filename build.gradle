/*
 * Copyright 2016-2023 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license.
 */


import org.jetbrains.kotlin.config.KotlinCompilerVersion
import org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType
import org.jetbrains.kotlin.konan.target.HostManager

import static Projects.*

buildscript {
    /*
     * These property group is used to build kotlinx.coroutines against Kotlin compiler snapshot.
     * How does it work:
     * When build_snapshot_train is set to true, kotlin_version property is overridden with kotlin_snapshot_version,
     * atomicfu_version is overwritten by TeamCity environment (AFU is built with snapshot and published to mavenLocal
     * as previous step or the snapshot build).
     * Additionally, mavenLocal and Sonatype snapshots are added to repository list and stress tests are disabled.
     * DO NOT change the name of these properties without adapting kotlinx.train build chain.
     */
    def prop = rootProject.properties['build_snapshot_train']
    ext.build_snapshot_train = prop != null && prop != ""
    if (build_snapshot_train) {
        ext.kotlin_version = rootProject.properties['kotlin_snapshot_version']
        if (kotlin_version == null) {
            throw new IllegalArgumentException("'kotlin_snapshot_version' should be defined when building with snapshot compiler")
        }
    }
    ext.native_targets_enabled = rootProject.properties['disable_native_targets'] == null

    // Determine if any project dependency is using a snapshot version
    ext.using_snapshot_version = build_snapshot_train
    rootProject.properties.each { key, value ->
        if (key.endsWith("_version") && value instanceof String && value.endsWith("-SNAPSHOT")) {
            println("NOTE: USING SNAPSHOT VERSION: $key=$value")
            ext.using_snapshot_version = true
        }
    }

    if (using_snapshot_version) {
        repositories {
            mavenLocal()
        }
    }

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        CommunityProjectsBuild.addDevRepositoryIfEnabled(delegate, project)
        mavenLocal()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath "org.jetbrains.kotlinx:atomicfu-gradle-plugin:$atomicfu_version"
        classpath "org.jetbrains.kotlinx:kotlinx-knit:$knit_version"
        classpath "org.jetbrains.kotlinx:binary-compatibility-validator:$binary_compatibility_validator_version"
        classpath "ru.vyarus:gradle-animalsniffer-plugin:$animalsniffer_version" // Android API check
        classpath "org.jetbrains.kotlin:atomicfu:$kotlin_version"
        classpath "org.jetbrains.kotlinx:kover-gradle-plugin:$kover_version"

        // JMH plugins
        classpath "gradle.plugin.com.github.johnrengelman:shadow:$shadow_version"
    }

    CacheRedirector.configureBuildScript(buildscript, rootProject)
}

// todo:KLUDGE: This is needed to workaround dependency resolution between Java and MPP modules
def configureKotlinJvmPlatform(configuration) {
    configuration.attributes.attribute(KotlinPlatformType.attribute, KotlinPlatformType.jvm)
}

// Configure subprojects with Kotlin sources
apply plugin: "configure-compilation-conventions"

allprojects {
    // the only place where HostManager could be instantiated
    project.ext.hostManager = new HostManager()
    def deployVersion = properties['DeployVersion']
    if (deployVersion != null) version = deployVersion

    if (build_snapshot_train) {
        ext.kotlin_version = rootProject.properties['kotlin_snapshot_version']
        println "Using Kotlin $kotlin_version for project $it"

        def skipSnapshotChecks = rootProject.properties['skip_snapshot_checks'] != null
        if (!skipSnapshotChecks && version != atomicfu_version) {
            throw new IllegalStateException("Current deploy version is $version, but atomicfu version is not overridden ($atomicfu_version) for $it")
        }

        kotlin_version = rootProject.properties['kotlin_snapshot_version']
    }

    if (using_snapshot_version) {
        repositories {
            mavenLocal()
        }
    }

    ext.unpublished = unpublished

    // This project property is set during nightly stress test
    def stressTest = project.properties['stressTest']

    // Copy it to all test tasks
    tasks.withType(Test) {
        systemProperty 'stressTest', stressTest
    }
}

apply plugin: "binary-compatibility-validator"
apply plugin: "base"
apply plugin: "kover-conventions"

apiValidation {
    ignoredProjects += unpublished + ["kotlinx-coroutines-bom"]
    if (build_snapshot_train) {
        ignoredProjects.add(coreModule)
    }
    ignoredPackages += "kotlinx.coroutines.internal"
}

// Configure repositories
allprojects {
    repositories {
        /*
         * google should be first in the repository list because some of the play services
         * transitive dependencies was removed from jcenter, thus breaking gradle dependency resolution
         */
        google()
        mavenCentral()
        CommunityProjectsBuild.addDevRepositoryIfEnabled(delegate, project)
    }
}

// needs to be before evaluationDependsOn due to weird Gradle ordering
apply plugin: "animalsniffer-conventions"

// Add dependency to core source sets. Core is configured in kx-core/build.gradle
configure(subprojects.findAll { !sourceless.contains(it.name) && it.name != coreModule }) {
    evaluationDependsOn(":$coreModule")
    if (isMultiplatform(it)) {
        apply plugin: "kotlin-multiplatform"
        apply plugin: "kotlin-jvm-multiplatform-conventions"
        apply from: rootProject.file("gradle/compile-common.gradle")

        if (rootProject.ext["native_targets_enabled"] as Boolean) {
            apply from: rootProject.file("gradle/compile-native-multiplatform.gradle")
        }

        apply from: rootProject.file("gradle/compile-jsAndWasmShared-multiplatform.gradle")

        apply from: rootProject.file("gradle/compile-js-multiplatform.gradle")

        apply from: rootProject.file("gradle/compile-wasm-multiplatform.gradle")

        kotlin.sourceSets.commonMain.dependencies {
            api project(":$coreModule")
        }
        kotlin.sourceSets.jvmTest.dependencies {
            implementation project(":$coreModule").kotlin.targets.jvm.compilations.test.output.allOutputs
        }
    } else {
        def platform = PlatformKt.platformOf(it)
        apply plugin: "kotlin-${platform}-conventions"
        dependencies {
            api project(":$coreModule")
            // the only way IDEA can resolve test classes
            testImplementation project(":$coreModule").kotlin.targets.jvm.compilations.test.output.allOutputs
        }
    }
}

apply plugin: "bom-conventions"
apply plugin: "java-modularity-conventions"
apply plugin: "version-file-conventions"

CommunityProjectsBuild.configureCommunityBuildTweaks(rootProject)

// Redefine source sets because we are not using 'kotlin/main/fqn' folder convention
configure(subprojects.findAll {
    !sourceless.contains(it.name) && !isMultiplatform(it) &&
            it.name != "benchmarks"
}) {
    // Pure JS and pure MPP doesn't have this notion and are configured separately
    // TODO detect it via platformOf and migrate benchmarks to the same scheme
    sourceSets {
        main.kotlin.srcDirs = ['src']
        test.kotlin.srcDirs = ['test']
        main.resources.srcDirs = ['resources']
        test.resources.srcDirs = ['test-resources']
    }
}


apply plugin: "dokka-conventions"
apply plugin: "knit-conventions"

configure(subprojects.findAll {
    !unpublished.contains(it.name) && it.name != coreModule
}) {
    apply from: rootProject.file('gradle/publish.gradle')
}

AuxBuildConfiguration.configure(rootProject)


// Report Kotlin compiler version when building project
println("Using Kotlin compiler version: $KotlinCompilerVersion.VERSION")

// --------------- Configure sub-projects that are published ---------------

def publishTasks = getTasksByName("publish", true)

task deploy(dependsOn: publishTasks)

